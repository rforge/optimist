library(pracma)
help pracma
?pracma
ÃŸmrank
mrank
?mrank
for (i in 2:10){#
	cat(mrank(magic(i)), "::")#
}
r <- numeric(8)#
for (i in 2:10){#
	r[i-2] <- mrank(magic(i))#
}#
is.identical(r, c(3, 3, 5, 5, 7, 3, 9, 7))#
is.identical(mrank, hilb(6))
r <- numeric(8)#
for (i in :10){#
	r[i-2] <- mrank(magic(i))#
}#
identical(r, c(3, 3, 5, 5, 7, 3, 9, 7))#
identical(mrank, hilb(6))
r <- numeric(8)#
for (i in 3:10){#
	r[i-2] <- mrank(magic(i))#
}#
identical(r, c(3, 3, 5, 5, 7, 3, 9, 7))#
identical(mrank, hilb(6))
r
str(r)
str(c(3, 3, 5, 5, 7, 3, 9, 7))
r <- numeric(8)#
for (i in 3:10){#
	r[i-2] <- mrank(magic(i))#
}#
identical(r, c(3, 3, 5, 5, 7, 3, 9, 7))#
identical(mrank(hilb(6)), 6)
mrank(hilb(6))
r <- numeric(8)#
for (i in 3:10){#
	r[i-2] <- mrank(magic(i))#
}#
identical(r, c(3, 3, 5, 5, 7, 3, 9, 7))#
all.equal(mrank(hilb(6)), 6)
r <- numeric(8)#
for (i in 3:10){#
	r[i-2] <- mrank(magic(i))#
}#
identical(r, c(3, 3, 5, 5, 7, 3, 9, 7))#
identical(mrank(hilb(6)), 6.0)
str(mrank(hilb(6)))
r <- numeric(8)#
for (i in 3:10){#
	r[i-2] <- mrank(magic(i))#
}#
identical(r, c(3, 3, 5, 5, 7, 3, 9, 7))#
identical(mrank(hilb(6)), 6L)
rank(c())
mrank <- function(M) {#
    if (length(M) == 0)#
        return(0)#
    if (!is.numeric(M))#
        stop("Argument 'M' must be a numeric matrix.")#
    if (is.vector(M))#
        M <- matrix(c(M), nrow = length(M), ncol = 1)#
#
    # The MASS way#
    r1 <- qr(M)$rank#
#
    # The Matlab way#
    sigma <- svd(M)$d#
    tol <- max(dim(M)) * max(sigma) * .Machine$double.eps#
    r2 <- sum(sigma > tol)#
#
    if (r1 != r2)#
        warning("Rank calculation may be problematic.")#
    return(r2)#
}
identical(mrank(NULL), c())
is.null(mrank(c()))
mrank(c())
identical(mrank(NULL), 0)
setwd('/Users/HwB/Work/myRforge/optimist/pkg/pracma/tests')
nullspace(magic(4))
N <- nullspace(magic(4))
N %*% magic(4)
?all.equal
setwd('/Users/HwB/Work/myRforge/optimist/pkg/pracma/tests')
N <- nullspace(magic(4))#
all.equal(N, c(0.2236, 0.6708, -0.6708, -0.2236), tolerance=1e-5)
setwd('/Users/HwB/Work/myRforge/optimist/pkg/pracma/tests')
N <- nullspace(magic(4))#
all.equal(as.numeric(N), c(0.2236, 0.6708, -0.6708, -0.2236), tolerance=1e-5)
setwd('/Users/HwB/Work/myRforge/optimist/pkg/pracma/tests')
N <- nullspace(magic(4))#
all.equal(as.numeric(N), c(0.2236, 0.6708, -0.6708, -0.2236), tolerance=1e-4)
setwd('/Users/HwB/Work/myRforge/optimist/pkg/pracma/tests')
N <- nullspace(magic(4))#
all.equal(as.numeric(N), c(0.223607, 0.670820, -0.670820, -0.223607),#
          tolerance = 1e-5)
setwd('/Users/HwB/Work/myRforge/optimist/pkg/pracma/tests')
N <- nullspace(magic(4))#
all.equal(N %*% magic(4), c(0, 0, 0), #
          tolerance = 1e-5)
setwd('/Users/HwB/Work/myRforge/optimist/pkg/pracma/tests')
#
N <- nullspace(magic(4))#
all.equal(as.numeric(N %*% magic(4)), c(0, 0, 0), #
          tolerance = 1e-5)
setwd('/Users/HwB/Work/myRforge/optimist/pkg/pracma/tests')
N <- nullspace(magic(4))#
all.equal(as.numeric(N %*% magic(4)), c(0, 0, 0, 0), #
          tolerance = 1e-5)
setwd('/Users/HwB/Work/myRforge/optimist/pkg/pracma/tests')
N <- nullspace(magic(4))#
all.equal(as.numeric(N %*% magic(4)), c(0, 0, 0, 0), tolerance = 1e-10)
M <- matrix(1:12, 3, 4)#
orth(M)
M
M <- matrix(1:12, 3, 4)#
all.equal(orth(M),#
          matrix(c(-0.504533,   0.760776,#
                   -0.574516,   0.057141,#
                   -0.6444986, -0.646495), 3, 2, byrow = TRUE),#
          tolerance = 1e-5)
orth(M)
setwd('/Users/HwB/Work/myRforge/optimist/pkg/pracma/tests')
all.equal(orth(M),#
          matrix(c(-0.504533, -0.760776,#
                   -0.574516, -0.057141,#
                   -0.644497,  0.646495), 3, 2, byrow = TRUE),#
          tolerance = 1e-5)
setwd('/Users/HwB/Work/myRforge/optimist/pkg/pracma/R')
orth <- function(M) {#
    if (length(M) == 0)#
        return(c())#
    if (!is.numeric(M))#
        stop("Argument 'M' must be a numeric matrix.")#
    if (is.vector(M))#
        M <- matrix(c(M), nrow = length(M), ncol = 1)#
#
    svdM <- svd(M)#
    U <- svdM$u#
    s <- svdM$d#
    tol <-  max(dim(M)) * max(s) * .Machine$double.eps#
#
    r <- sum(s > tol)#
    U[,1:r, drop = FALSE]#
}
setwd('/Users/HwB/Work/myRforge/optimist/pkg/pracma/tests')
is.null(orth(c()))
setwd('/Users/HwB/Work/myRforge/optimist/pkg/pracma/tests')
H <- pracma::hadamard(8)#
A <- H[, 2:4]#
B <- H[, 5:8]#
all.equal(subspace(A, B), pi/2, tolerance = 1e-10)
mrank <- pracma::mrank#
nullspace <- pracma::nullspace#
#
all.equal(mrank(c(), 0))#
r <- numeric(8)#
for (i in 3:10){#
    r[i-2] <- mrank(magic(i))#
}#
identical(r, c(3, 3, 5, 5, 7, 3, 9, 7))#
identical(mrank(hilb(6)), 6L)#
#
N <- nullspace(magic(4))#
all.equal(as.numeric(N), c(0.2236, 0.6708, -0.6708, -0.2236),#
          tolerance = 1e-5)
N
setwd('/Users/HwB/Work/myRforge/optimist/pkg/pracma/R')
cond <- function(M, p = 2) {#
    if (length(M) == 0)#
        return(0)#
    if (!is.numeric(M))#
        stop("Argument 'M' must be a numeric matrix.")#
    if (is.vector(M))#
        M <- matrix(c(M), nrow = length(M), ncol = 1)#
#
    if (length(M) == 0) return(c())#
    if (ncol(M) != nrow(M) && p != 2)#
        stop("Matrix 'M' must be square if p = 2.")#
#
    if (p == 2) {#
        s <- svd(M)$d#
        cnd <- if (any(s == 0)) Inf else max(s) / min(s)#
    } else {#
        stop("At the moment, p-norms other than p = 2 are not implemented.")#
        #cnd <- norm(M, p) * norm(inv(M), p)#
    }#
    return(cnd)#
}
cond(hilb(8))
cond(hilb(1), hilb(2), hilb(3), hilb(4))
setwd('/Users/HwB/Work/myRforge/optimist/pkg/pracma/tests')
c(cond(hilb(1)), cond(hilb(2)), cond(hilb(3)), cond(hilb(4)))
setwd('/Users/HwB/Work/myRforge/optimist/pkg/pracma/tests')
all.equal(c(cond(hilb(1)), cond(hilb(2)), cond(hilb(3)), cond(hilb(4))),#
          c(1, 19.281470, 524.056778,  15513.738739),#
          tolerance = 1e-6)
setwd('/Users/HwB/Work/myRforge/optimist/pkg/pracma/tests')
all.equal(c(cond(hilb(1)), cond(hilb(2)), cond(hilb(3)), cond(hilb(4))),#
          c(1, 19.281470, 524.056778,  15513.738739),#
          tolerance = 1e-6)#
M <- pracma::magic(5)#
all.equal(normest(M), max(svd(M)$d)#
all.equal(normest(pracma::magic(100)), 500050)
setwd('/Users/HwB/Work/myRforge/optimist/pkg/pracma/tests')
all.equal(normest(M), max(svd(M)$d))#
all.equal(normest(pracma::magic(100)), 500050)
